// Prisma Schema for Field Force CRM
// Database: Neon PostgreSQL (serverless)
// Documentation: https://www.prisma.io/docs

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// DAY 1: Authentication Models
// ============================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // bcrypt hashed
  name      String
  phone     String?
  role      UserRole @default(FIELD_REP)
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  // Relations
  contacts  Contact[] // Contacts assigned to this user

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([companyId])
}

model Company {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  address     String?

  // Relations
  users       User[]
  contacts    Contact[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([email])
}

enum UserRole {
  SUPER_ADMIN   // Platform admin
  ADMIN         // Company admin
  MANAGER       // Regional manager
  FIELD_REP     // Medical representative
}

// ============================================================================
// DAY 2: Contact Management
// ============================================================================

model Contact {
  id              String       @id @default(cuid())

  // Basic Information
  name            String
  designation     String?      // Dr., Pharmacist, Store Owner, etc.
  specialty       String?      // Cardiologist, Dermatologist, etc.
  contactType     ContactType  @default(DOCTOR)

  // Contact Details
  phone           String?
  email           String?
  alternatePhone  String?

  // Address Information
  address         String?
  city            String?
  state           String?
  pincode         String?

  // Professional Details
  hospitalName    String?
  clinicName      String?
  licenseNumber   String?

  // Visit Planning
  visitFrequency  VisitFrequency @default(MONTHLY)
  preferredDay    String?        // Monday, Tuesday, etc.
  preferredTime   String?        // Morning, Afternoon, Evening
  lastVisitDate   DateTime?
  nextVisitDate   DateTime?

  // Relationship
  assignedToId    String?
  assignedTo      User?        @relation(fields: [assignedToId], references: [id])
  companyId       String?
  company         Company?     @relation(fields: [companyId], references: [id])

  // Additional Information
  notes           String?      // Special notes about the contact
  tags            String[]     @default([])

  // Status
  isActive        Boolean      @default(true)

  // Metadata
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Single column indexes
  @@index([assignedToId])
  @@index([companyId])
  @@index([contactType])
  @@index([city])
  @@index([isActive])

  // Composite indexes for common query patterns
  @@index([companyId, isActive, contactType])       // List active contacts by company and type
  @@index([assignedToId, isActive])                 // Field rep's active contacts
  @@index([companyId, contactType, isActive])       // Contacts by type within company (duplicate for clarity)
  @@index([city, contactType])                      // Geographic + type queries
  @@index([nextVisitDate, assignedToId])            // Visit planning queries
  @@index([isActive, createdAt])                    // Recent active contacts
}

enum ContactType {
  DOCTOR        // Medical practitioner
  PHARMACIST    // Pharmacy owner/staff
  RETAILER      // Medical store retailer
  HOSPITAL      // Hospital admin/procurement
  CLINIC        // Clinic contact
  OTHER         // Other contacts
}

enum VisitFrequency {
  DAILY
  WEEKLY
  BIWEEKLY      // Every 2 weeks
  MONTHLY
  QUARTERLY
  CUSTOM
}

// ============================================================================
// DAY 3-5: Additional models will be added via migrations
// - Visits (GPS tracking)
// - Orders (product orders)
// - Payments (payment tracking)
// ============================================================================
